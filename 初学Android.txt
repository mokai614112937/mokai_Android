调用应用程序资源：
        --代码中调用：this.getResources().get资源下的文件名(R.id.文件下的属性名);
        --.资源文件之间相互调用：android:text="@资源类型/资源名称"
        --.调用系统资源:@android:系统资源（color..）
 manifest：
        --.结构：
                <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                        package="think.android.helloandroid"
                        android:versionCode="1"
                        android:versionName="1.0" >
                        <uses-sdk
                        android:minSdkVersion="8"
                        android:targetSdkVersion="19" />
                        <application
                                android:allowBackup="true"
                                android:icon="@drawable/ic_launcher"
                                android:label="@string/app_name"
                                android:theme="@style/AppTheme" >
                                <activity
                                        android:name="think.android.helloandroid.MainActivity"
                                        android:label="@string/app_name" >
                                        <intent-filter>
                                                <action android:name="android.intent.action.MAIN" />
                                                <category android:name="android.intent.category.LAUNCHER" />
                                        </intent-filter>
                                </activity>
                        </application>
                </manifest>
        --.文件约定：
                --.Elements（元素）
                        --.元素全部小写
                        --.同级别元素顺序无关（但 Android-alais 必须放在activity后面）
                --.Attribute（属性）
                        --.属性可选（除了name属性）
                        --.都是Android：前缀（manifest除外）
               --.声明类的名称：
                         <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                                package="think.android.helloandroid"
                                android:versionCode="1"
                                android:versionName="1.0" >
                                ....
                                <application
                                        ...
                                        <activity
                                                android:name=".类名"
                                                android:label="@string/app_name" >
                                                <intent-filter>
                                                        ....
                                                </intent-filter>
                                        </activity>
                                        <activity
                                                android:name=".类名"
                                                android:label="@string/app_name" >
                                                <intent-filter>
                                                        ....
                                                </intent-filter>
                                        </activity>
                                </application>
                --.多值：
                        <intent-filter>
                                <action android:name="android.intent.action.值名 />
                                <action android:name="android.intent.action.值名" />
                                <action android:name="android.intent.action.值名" />
                                <action android:name="android.intent.action.值名" />
                        </intent-filter>
               --.资源引用：android:icon="@type/name"
       Android进程生命周期：
               --.进程等级：（等级依次降低）
                       --.Active Process（活动进程）：（安全优先级最高-杀死Foreground需要用户响应）
                               --.正处于Activity Resume()状态
                               --.正处于与bound服务交互的状态
                               --.正处于服务在前台运行的状态（startForeground()被调用）
                               --.Service生命周期函数正在被执行（onCreate(),onStart(),onDestory()）
                               --.BroadcastReceiver 正在执行 onReceive()方法
                        --.Visible Process（可见进程）：
                               --.当前进程不是焦点进程，Activity不在前端显示，但一直对用户可见（onPause()），比如弹出一个对话框
                               --.It hosts a Service that's bound to a visible (or foreground) activity.
                        --.Service process（服务进程）：
                               --.一个正在运行Service（startService()）并且不属于上述两个服务的进程。
                               --.当系统没有足够的内存时将会kill该进程
                        --.Background process（后台进程）
                               --.对用户不可见的Activity进程，没有与任何的Service服务相关联（onStop()），系统有个后台进程列表
                                   一般情况下采取后进先出的原则来释放Background process资源
                        --.Empty process（空进程）
                               --.没有运行任何active application components，保留它主要是为了缓存的需要
                --.退出系统应用程序：  
                        --.System.exit(0)或 Process.killProcess(Process.myPid());
                        
Activity&&Intent：
                --.Activity定义及作用：
                        --.Android应用程序提供交互界面的一个重要组件，也是Android最重要的组件之一。
                        --.Activity是一个业务类，是承载应用程序的界面以及业务行为的基础。（包括UI，Service...类似于javaBean）
                --.Intent&IntentFilter：
                        --在不同的组件之间传递值而设计的一个数据结构
                --.启动一个Activity过程：
                        --.建立Activity类（a subclass of Activity ）及属性和内部方法
                        --.在AndroidManifest.xml中注册Activity类
                        --.在启动函数（onCreate()）中实现业务
                                --.定义界面define the layout for the activity's user interface
                                --.用setContentView()绑定界面
                --.编写一个Activity类：
                        --.创建Activity及相关视图文件Layout（view）
                        --.配置AndroidManifest.xml文件
                        --.重载onCreate()及绑定Activity和Layout（view）
                                --.什么是view？
                                --.setContentView()方法详解
                                        --Activity 中的setContentView()实际调用->Window下的setContentView()<-PhoneWindow的setContentView()实现
                                        --setContentView(R.layout.layout_activity1)等价于this.getWindow().setContentView(this.getLayoutInflater().inflate(R.layout.layout_activity1, null));
                                --.Activity、Window、View三者关系
                                        --.Activity构造时调用一个attach方法初始化一个window->通过PolicyManager.makeNewWindow(this)跟自己建立联系，
                                           最终调用Policy类中的makeNewWindow()方法返回new PhoneWindow(context)对象
                                        --.这个PhoneWindow有一个“ViewRoot”，其实这个“ViewRoot”是一个View或者说ViewGroup，是最初始的根视图
                                        --.“ViewRoot”通过addView方法来一个个的添加View。
                                --.inflater实现界面加载this.getWindow().setContentView(this.getLayoutInflater().inflate(R.layout.layout_activity1, null));
                        --.为View（layout）添加组件
                        --.在onCreate()中间实现初始业务逻辑
                                --.findViewById()
                                --.addView()
                                //动态添加组件
                                Button _newButton = new Button(this);
                                _newButton.setText("newbutton");
                                LinearLayout _linearLayout = (LinearLayout) findViewById(R.id.linearLayout);
                                _linearLayout.addView(_newButton,LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
                --.